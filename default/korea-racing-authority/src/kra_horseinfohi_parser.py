import pyspark
import datetime
import time
import requests
import traceback
import bs4
import random
from pyspark.sql.functions import *
from pyspark.sql.types import *
import re

spark = pyspark.sql.SparkSession.builder.getOrCreate()

dt = datetime.datetime.now()

df = spark.read.json(f'/lake/red/korea_racing_authority/horse_info_hi')

df = df.na.replace('-', None)
df = df.withColumn("foalgDt", regexp_replace('foalgDt', '\(.*\)|\s-\s.*', ''))
df = df.withColumn('hrsHeadChticTxt', split(df.hrsHeadChticTxt, ','))
df = df.withColumn('hrsNeckChticTxt', split(df.hrsNeckChticTxt, ','))
df = df.withColumn('hrsBodyChticTxt', split(df.hrsBodyChticTxt, ','))

df = df.withColumn("bldlnRegDt", col("bldlnRegDt").cast(DateType()))
df = df.withColumn("bredgRegDt", col("bredgRegDt").cast(DateType()))
df = df.withColumn("damHrnm", col("damHrnm").cast(StringType()))
df = df.withColumn("etcChticTxt", col("etcChticTxt").cast(StringType()))
df = df.withColumn("fdtRegDt", col("fdtRegDt").cast(DateType()))
df = df.withColumn("foalgDt", col("foalgDt").cast(DateType()))
df = df.withColumn("gndrNm", col("gndrNm").cast(StringType()))
df = df.withColumn("horseCtcolNm", col("horseCtcolNm").cast(StringType()))
df = df.withColumn("hrnmGrtDt", col("hrnmGrtDt").cast(DateType()))
df = df.withColumn("hrno", col("hrno").cast(StringType()))
df = df.withColumn("hrsBodyChticTxt", col("hrsBodyChticTxt").cast(StringType()))
df = df.withColumn("hrsEtcPntsBrandShaTxt", col("hrsEtcPntsBrandShaTxt").cast(StringType()))
df = df.withColumn("hrsHeadChticTxt", col("hrsHeadChticTxt").cast(StringType()))
df = df.withColumn("hrsNeckChticTxt", col("hrsNeckChticTxt").cast(StringType()))
df = df.withColumn("ihrno", col("ihrno").cast(StringType()))
df = df.withColumn("imphrEngHrnm", col("imphrEngHrnm").cast(StringType()))
df = df.withColumn("indcCtryNm", col("indcCtryNm").cast(StringType()))
df = df.withColumn("korHrnm", col("korHrnm").cast(StringType()))
df = df.withColumn("microNo", col("microNo").cast(StringType()))
df = df.withColumn("orcpyDt", col("orcpyDt").cast(DateType()))
df = df.withColumn("owrNm", col("owrNm").cast(StringType()))
df = df.withColumn("passport", col("passport").cast(DateType()))
df = df.withColumn("pctyNm", col("pctyNm").cast(StringType()))
df = df.withColumn("ppseNm", col("ppseNm").cast(StringType()))
df = df.withColumn("prodNm", col("prodNm").cast(StringType()))
df = df.withColumn("rchrRegCnclDt", col("rchrRegCnclDt").cast(DateType()))
df = df.withColumn("rchrRegDt", col("rchrRegDt").cast(StringType()))
df = df.withColumn("sireHrnm", col("sireHrnm").cast(StringType()))
df = df.withColumn("sitlNm", col("sitlNm").cast(StringType()))
df = df.withColumn("spcsNm", col("spcsNm").cast(StringType()))
df = df.withColumn("studbook", col("studbook").cast(StringType()))

df = df.withColumnRenamed("bldlnRegDt", "bloodline_registration_date")
df = df.withColumnRenamed("bredgRegDt", "breeding_registration_date")
df = df.withColumnRenamed("damHrnm", "dam_horse_name")
df = df.withColumnRenamed("etcChticTxt", "etc_characteristic_text")
df = df.withColumnRenamed("fdtRegDt", "foundation_registration_date")
df = df.withColumnRenamed("foalgDt", "foal_registration_date")
df = df.withColumnRenamed("gndrNm", "gender")
df = df.withColumnRenamed("horseCtcolNm", "horse_coat_color_name")
df = df.withColumnRenamed("hrnmGrtDt", "horse_name_grant_date")
df = df.withColumnRenamed("hrno", "horse_number")
df = df.withColumnRenamed("hrsBodyChticTxt", "body_characteristic_text")
df = df.withColumnRenamed("hrsEtcPntsBrandShaTxt", "etc_brand_shape_text")
df = df.withColumnRenamed("hrsHeadChticTxt", "head_characteristic_text")
df = df.withColumnRenamed("hrsNeckChticTxt", "neck_characteristic_text")
df = df.withColumnRenamed("ihrno", "international_horse_number")
df = df.withColumnRenamed("imphrEngHrnm", "imported_horse_english_name")
df = df.withColumnRenamed("indcCtryNm", "imported_contry_name")
df = df.withColumnRenamed("korHrnm", "korean_horse_name")
df = df.withColumnRenamed("microNo", "microchip_number")
df = df.withColumnRenamed("orcpyDt", "death_date")
df = df.withColumnRenamed("owrNm", "owner_name")
df = df.withColumnRenamed("passport", "passport")
df = df.withColumnRenamed("pctyNm", "production_country_name")
df = df.withColumnRenamed("ppseNm", "end_use")
df = df.withColumnRenamed("prodNm", "producer_name")
df = df.withColumnRenamed("rchrRegCnclDt", "race_horse_registration_cancle_date")
df = df.withColumnRenamed("rchrRegDt", "race_horse_registration_date")
df = df.withColumnRenamed("sireHrnm", "sire_horse_name")
df = df.withColumnRenamed("sitlNm", "location_name")
df = df.withColumnRenamed("spcsNm", "horse_breed")
df = df.withColumnRenamed("studbook", "studbook")

df2 = df.coalesce(5) 

df2.printSchema()
df2.show()

df2.write.mode('overwrite').option('compression', 'snappy').parquet(f'/lake/yellow/korea_racing_authority/horse_info_hi')

# << horse_info_hi >>
# root
#  |-- bldlnRegDt: date (nullable = true)
#  |-- bredgRegDt: date (nullable = true)
#  |-- damHrnm: string (nullable = true)
#  |-- etcChticTxt: string (nullable = true)
#  |-- fdtRegDt: date (nullable = true)
#  |-- foalgDt: date (nullable = true)
#  |-- gndrNm: string (nullable = true)
#  |-- horseCtcolNm: string (nullable = true)
#  |-- hrnmGrtDt: date (nullable = true)
#  |-- hrno: string (nullable = true)
#  |-- hrsBodyChticTxt: array (nullable = true)
#  |    |-- element: string (containsNull = false)
#  |-- hrsEtcPntsBrandShaTxt: string (nullable = true)
#  |-- hrsHeadChticTxt: array (nullable = true)
#  |    |-- element: string (containsNull = false)
#  |-- hrsNeckChticTxt: array (nullable = true)
#  |    |-- element: string (containsNull = false)
#  |-- ihrno: string (nullable = true)
#  |-- imphrEngHrnm: string (nullable = true)
#  |-- indcCtryNm: string (nullable = true)
#  |-- korHrnm: string (nullable = true)
#  |-- microNo: string (nullable = true)
#  |-- orcpyDt: date (nullable = true)
#  |-- owrNm: string (nullable = true)
#  |-- passport: date (nullable = true)
#  |-- pctyNm: string (nullable = true)
#  |-- ppseNm: string (nullable = true)
#  |-- prodNm: string (nullable = true)
#  |-- rchrRegCnclDt: date (nullable = true)
#  |-- rchrRegDt: string (nullable = true)
#  |-- sireHrnm: string (nullable = true)
#  |-- sitlNm: string (nullable = true)
#  |-- spcsNm: string (nullable = true)
#  |-- studbook: string (nullable = true)

